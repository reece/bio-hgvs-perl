#!/usr/bin/perl

use strict;
use warnings;

use File::Basename;
use File::Temp qw( tempdir );
use FindBin;
use IO::Pipe;
use Log::Log4perl;
use URI::Escape;
use XML::LibXML;

use lib "$FindBin::RealBin/../ext/lib/perl5";
use Mojolicious::Lite;

use lib "$FindBin::RealBin/../lib";
use Bio::HGVS::EnsemblConnection;
use Bio::HGVS::Errors;
use Bio::HGVS::VariantParser;
use Bio::HGVS::VariantMapper;

my $jemappelle = basename( $0 );
my %hg_info = _fetch_hg_info();

any '/hgvs-translator' => sub {
  my $self = shift;;

  $self->stash( 'hgvs_variants' => $self->param('hgvs-variants') || '' );
  $self->stash( 'hg_info'       => \%hg_info );
  $self->stash( 'title'         => 'HGVS Translator' );
  my $results;

  if (defined $self->param('hgvs-variants')) {
	$results = [
	  { cc => 'chr6:11-22',
		g => 'NC_00006.78:g.123A>T',
		c => 'NM_12345.78:c.123A>T',
		p => 'NP_67890.78:g.Ala123Pro' },

	 ];

	if ( $self->param('fmt') eq 'json' ) {
	  $self->render( json => $results );
	}

	if ( $self->param('fmt') eq 'xml' ) {
	}
  }

  $self->stash( 'results'       => $results );
  $self->render();
};

## none of the following works. I dunno why.
#my $tmpdir = tempdir( "$jemappelle-XXXXX",
#					  TMPDIR => 1, CLEANUP => 1 );
#warn($tmpdir);
#
#app->static->root('/tmp/');
#


#app->plugin(tt_renderer => {
#  #COMPILE_DIR => $tmpdir
# });

app->start;





############################################################################

sub _fetch_hg_info {
  my %rv;
  my $hg_in = IO::Pipe->new();
  if (not $hg_in->reader( qw(/usr/bin/hg log -l 1), $FindBin::RealBin )) {
	throw Bio::GenomeCommons::Error($!);
  }
  while ( my $line = <$hg_in> ) {
	if (my ($k,$v) = $line =~ m/^(\w+):\s+(.+)/) {
	  $rv{$k} = $v;
	}
  }
  $rv{'changeset'} =~ s/^\d+://;
  return %rv;
}




__DATA__
@@ hgvstranslator.html.ep
<!doctype html>
<html>
  <head>
    <title>Locus &raquo; <%= $title %></title>
    <script language="javascript" src=
    'http://ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.min.js'></script>
    <style type="text/css">
h1 {
 margin: 0px;
}
h2 {
  border-top: thin dotted gray;
 background: #15f;
 color: white;
 margin: 10px 0px 3px 0px;
}
table.results {
 width: 100%;
 border: thin solid gray;
}
table.results th {
 background: #ddd;
}
div.footer {
 color: #999;
 background: #ddd;
 border-top: thin solid #999;
 font-size: smaller;
 margin-top: 10px;
}
    </style>
  </head>

  <body>

  <h1>Locus &raquo; <%= $title %></h1>

  Interconvert chromosomal, cDNA, and protein variants specified according
  to <a href="http://www.hgvs.org/mutnomen/">HGVS nomenclature for
  sequence variants</a>.

  <h2>Input</h2>
  <form method="post">
  <label for="hgvs">Enter HGVS variants:</label>
  <input type="submit" name="submit" value="Translate"/>
  <br><textarea name="hgvs-variants" rows=5 cols=30></textarea>
  </form>

% if (defined $results) {
  <h2>Results (<%= $#$results+1 %>)</h2>
  <table class="results">
    <thead>
      <tr>
        <th>chr</th>
        <th>g.</th>
        <th>c.</th>
        <th>p.</th>
      </tr>
    </thead>

    <tbody>
% foreach my $row (@$results) {
      <tr>
		<td><%= $row->{cc} %></td>
		<td><%= $row->{g}  %></td>
		<td><%= $row->{c}  %></td>
		<td><%= $row->{p}  %></td>
	  </tr>
% }
    </tbody>
  </table>
% }


<div class="footer">
version: <%= $hg_info->{changeset} %> (<%= $hg_info->{date} %>)
</div>

  </body>
</html>





__END__


my $about_xml = _about_xml(
  'format-version' => 2,
 );
my @path_handlers = (
  [ qr%/version(?:/|$)%    		, \&version_handler   ],
  [ qr%/hgvs/genome-map/%  		, \&genome_map_handler ],
  [ qr%/hgvs/translate/%  		, \&translate_handler ],
  #[ qr%/rs/lookup/% 	 		, \&rs_lookup ],
  #[ qr%/hgvs/validate/%   		, \&validate_handler  ],
 );


my %opts = (
  xml_format => 2, 							# indented, with newlines
  sleeptime => 5,
  port => $ENV{PORT} || 7778,
);
GetOptions(\%opts,
		   'sleeptime|s=i',
		   'port|p=i'
		  )
  or die("$jemappelle: You've got usage issues, homeboy\n");


Log::Log4perl::init( \&log4conf() );

my $logger = Log::Log4perl->get_logger($jemappelle);
$logger->info("$jemappelle starting...");

$logger->info(sprintf('connecting to Ensembl (%s@%s:%s)...',
					  @{Bio::HGVS::EnsemblConnection::defaults{qw(user host port)}}));
my $ens = Bio::HGVS::EnsemblConnection->new();
$logger->info(sprintf('Ensembl connection established'));

my $vm = Bio::HGVS::VariantMapper->new( $ens );
my $vp = Bio::HGVS::VariantParser->new();

my $daemon = start_daemon( 5 );
$logger->info("$jemappelle available at ", $daemon->url, "\n" );

while( my $c = $daemon->accept ) {
  process_connection($c);
  $c->close;
}

exit;





sub log4conf {
  return <<EOF;
log4perl.rootLogger 	         	= DEBUG, Logfile, Screen

log4perl.appender.Logfile       	= Log::Log4perl::Appender::File
log4perl.appender.Logfile.filename 	= /tmp/hgvs-mapper-web-service-$<.log
log4perl.appender.Logfile.layout   	= Log::Log4perl::Layout::PatternLayout
log4perl.appender.Logfile.layout.ConversionPattern = %d %c %F:%L %m%n

log4perl.appender.Screen         	= Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr  	= 0
log4perl.appender.Screen.layout 	= Log::Log4perl::Layout::SimpleLayout
EOF
}


sub start_daemon {
  my ($ntries) = @_;
  for(my $i=1; $i<=$ntries; $i++) {
	$daemon = HTTP::Daemon->new(
	  LocalPort => $opts{port},
	 );
	return $daemon if defined $daemon;
	$logger->debug(sprintf('daemon start attempt %d failed: %s; sleeping %d seconds', 
						   $i, $!, $opts{sleeptime}));
	sleep $opts{sleeptime};
  }
  throw Bio::HGVS::Error(sprintf("failed to start daemon after $ntries attempts\n"));
}


sub process_connection {
  my ($c) = @_;
  my $ref = sprintf('%s:%s', $c->peerhost, $c->peerport);
  $logger->debug(sprintf('[%s]: connection received',$ref));

  while ( my $req = $c->get_request ) {		# HTTP::Request
	$logger->debug(sprintf('[%s]: request: %s %s', $ref, $req->method, $req->uri->path));

	if ($req->method ne 'GET') {
	  $c->send_error(RC_FORBIDDEN);
	}

	my @handler_matches = grep { $req->uri->path =~ m%^($_->[0])% } @path_handlers;

	if (not @handler_matches) {
	  $c->send_error(RC_FORBIDDEN);
	  return;
	}

	if ($#handler_matches > 0) {
	  $logger->error( sprintf('%s matches more than one path handler; using first',
							  $req->uri->path) );
	}

	my $ph = $handler_matches[0];
	if (my ($path,$query) = $req->uri->path =~ m%($ph->[0])(.*)%) {
	  my $hgvs = uri_unescape($query);
	  my $xml_result;
	  try {
		$xml_result = $ph->[1]($ref,$hgvs);
	  } catch Bio::HGVS::Error with {
		my $e = shift;
		$logger->error($e);
		$xml_result = _xmlify_exception($e);
	  } otherwise {
		# FIXME: stacktrace is wrong here
		my $e = Bio::HGVS::Error->new($@);
		$logger->error($e);
		$xml_result = _xmlify_exception($e);
	  };

	  my $xml = XML::LibXML::Element->new("$jemappelle-response");
	  $xml->setAttribute('path', $path);
	  $xml->appendChild($about_xml);
	  $xml->appendChild( $xml_result ) if defined $xml_result;

	  $c->send_response( HTTP::Response->new(
		200,undef,undef,$xml->toString($opts{xml_format}))
	   );
	}
  }

  $logger->debug(sprintf('[%s]: connection closed', $ref));
}



sub version_handler {
  # This used to return version info. Now that version info is returned in
  # all responses, this is just a stub.
  return;
}


sub genome_map_handler {
  my ($ref,$hgvs) = @_;
  my $v = $vp->parse($hgvs);
  $logger->debug(sprintf('[%s]: %s parsed okay; type=%s', $ref, $hgvs, $v->type));

  if ($v->type ne 'c') {
	throw Bio::HGVS::Error->new('moltype ',$v->type, ' not supported (yet)');
  }

  my @g = $vm->convert_cds_to_chr($v);
  return join(
	'',
	"<Coordinates>\n",
	(map { _formatter($_) } @g),
	"</Coordinates>\n"
   );
}


sub _formatter {
  my ($g) = shift;
  my $chr = $Bio::HGVS::VariantMapper::nc_to_chr{$g->ref} || '?';
  sprintf("  <ChromosomalPosition chromosome=\"%d\" start=\"%d\" end=\"%d\" hgvs=\"%s\"/>\n",
		  $chr, $g->loc->start, $g->loc->end, "$g");
}




sub coordinate_xml {
  my ($g) = @_;
  my $chr = $Bio::HGVS::VariantMapper::nc_to_chr{$g->ref} || '?';
  my $e = XML::LibXML::Element->new('genomic-coordinates');
  $e->setAttribute('chromosome',$chr);
  $e->setAttribute('start',$g->loc->start->position);
  $e->setAttribute('start-offset',$g->loc->start->intron_offset);
  $e->setAttribute('end',$g->loc->end->position);
  $e->setAttribute('end-offset',$g->loc->end->intron_offset);
  $e->setAttribute('hgvs-location',scalar $g->loc);
  return $e;
}






sub _about_xml {
  my %extra_info = @_;
  my %hg_info = _fetch_hg_info();
  my $xml = XML::LibXML::Element->new('about');
  $xml->setAttribute($_,$hg_info{$_}) for grep { m/^(?:changeset|tag|date)$/ } keys %hg_info;
  $xml->setAttribute($_,$extra_info{$_}) for keys %extra_info;
  return $xml;
}


sub _xmlify_exception {
  my ($e) = @_;
  my $xml = XML::LibXML::Element->new('error');
  $xml->setAttribute('message', $e->error);
  return $xml;
}
