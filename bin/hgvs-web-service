#!/usr/bin/perl

use strict;
use warnings;

use Data::Dumper;
use File::Basename;
use FindBin;
use URI::Escape;
use HTTP::Daemon;
use HTTP::Status;
use Log::Log4perl;
use IO::Pipe;

use lib "$FindBin::RealBin/../lib";
use Bio::HGVS::EnsemblConnection;
use Bio::HGVS::Errors;
use Bio::HGVS::VariantParser;
use Bio::HGVS::VariantMapper;


my @path_handlers = (
  [ qr%/version(?:/|$)%    		, \&version_handler   ],
  [ qr%/hgvs/genome-map/%  		, \&genome_map_handler ],
  [ qr%/hgvs/translate/%  		, \&translate_handler ],
  #[ qr%/rs/lookup/% 	 		, \&rs_lookup ],
  #[ qr%/hgvs/validate/%   		, \&validate_handler  ],
 );



$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;


my $root = dirname( $FindBin::RealBin );
my $jemappele = basename( $0 );
my $sleeptime = 5;

Log::Log4perl::init( \&log4conf() );

my $logger = Log::Log4perl->get_logger($jemappele);
$logger->info("$0 started");

$logger->info(sprintf('connecting to Ensembl (%s@%s:%s)...',
					  @{Bio::HGVS::EnsemblConnection::defaults{qw(user host port)}}));
my $ens = Bio::HGVS::EnsemblConnection->new();
$logger->info(sprintf('Ensembl connection established'));

my $vm = Bio::HGVS::VariantMapper->new( $ens );
my $vp = Bio::HGVS::VariantParser->new();

my $daemon = start_daemon( 5 );
$logger->info('mapper-ws available at ', $daemon->url, "\n" );

while( my $c = $daemon->accept ) {
  process_connection($c);
  $c->close;
}

exit;





sub log4conf {
  return <<EOF;
log4perl.rootLogger 	         	= DEBUG, Logfile, Screen

log4perl.appender.Logfile       	= Log::Log4perl::Appender::File
log4perl.appender.Logfile.filename 	= /tmp/hgvs-mapper-web-service-$<.log
log4perl.appender.Logfile.layout   	= Log::Log4perl::Layout::PatternLayout
log4perl.appender.Logfile.layout.ConversionPattern = %d %c %F:%L %m%n

log4perl.appender.Screen         	= Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr  	= 0
log4perl.appender.Screen.layout 	= Log::Log4perl::Layout::SimpleLayout
EOF
}


sub start_daemon {
  my ($ntries) = @_;
  for(my $i=1; $i<=$ntries; $i++) {
	$daemon = HTTP::Daemon->new(
	  LocalPort => $ENV{PORT} || 7777,
	 );
	return $daemon if defined $daemon;
	$logger->debug(sprintf('daemon start attempt %d failed: %s; sleeping %d seconds', 
						   $i, $!, $sleeptime));
	sleep $sleeptime;
  }
  throw Bio::HGVS::Error(sprintf("failed to start daemon after $ntries attempts\n"));
}


sub process_connection {
  my ($c) = @_;
  my $ref = sprintf('%s:%s', $c->peerhost, $c->peerport);
  $logger->debug(sprintf('[%s]: connection received',$ref));

  while ( my $req = $c->get_request ) {		# HTTP::Request

	$logger->debug(sprintf('[%s]: request: %s %s', $ref, $req->method, $req->uri->path));

	if ($req->method ne 'GET') {
	  $c->send_error(RC_FORBIDDEN);
	}


	foreach my $ph (@path_handlers) {
	  if (my ($path,$query) = $req->uri->path =~ m%($ph->[0])(.*)%) {
		my $hgvs = uri_unescape($query);
		my $xml_response = "<Results>\n";
		$xml_response .= "<Query><![CDATA[$hgvs]]</Query>\n";
		$xml_response .= "<Path><![CDATA[$path]]</Path>\n";

		try {
		  $xml_response .= $ph->[1]($ref,$hgvs);
		} catch Bio::HGVS::Error with {
		  my $e = shift;
		  $logger->error($e);
		  $xml_response .= $e->xmlify();
		#} otherwise {
		#  # FIXME: stacktrace is wrong here; fix it
		#  # commented out until it's fixed
		#  my $e = Bio::HGVS::Error->new($@);
		#  $logger->error($e);
		#  $xml_response .= $e->xmlify();
		};

		$xml_response .= "</Results>\n";
		$c->send_response( HTTP::Response->new(200,undef,undef,$xml_response) ); 
	  }
	}

	# here only if no path handler matched
	$c->send_error(RC_FORBIDDEN);
  }

  $logger->debug(sprintf('[%s]: connection closed', $ref));
}



sub version_handler {
  my %hg_info = _fetch_hg_info();			# throw on error
  return sprintf("<VersionResult>\n  <Changeset>%s</Changeset>\n  <Date>%s</Date>\n</VersionResult>\n",
				 $hg_info{'changeset'}, $hg_info{'date'});
}


sub genome_map_handler {
  my ($ref,$hgvs) = @_;
  my $v = $vp->parse($hgvs);
  $logger->debug(sprintf('[%s]: %s parsed okay; type=%s', $ref, $hgvs, $v->type));

  if ($v->type ne 'c') {
	throw Bio::HGVS::Error->new('moltype ',$v->type, ' not supported (yet)');
  }
  my @g = $vm->convert_cds_to_chr($v);

  return join(
	'',
	"<Coordinates>\n",
	(map { _formatter($_) } @g),
	"</Coordinates>\n"
   );
}


sub translate_handler {
  my ($ref,$hgvs) = @_;

  my $v = $vp->parse($hgvs);
  $logger->debug(sprintf('[%s]: %s parsed okay; type=%s', $ref, $hgvs, $v->type));

  if ($v->type eq 'g') {
	my @c = $vm->convert_chr_to_cds($v);
#	my @p = $vm->convert_cds_to_pro(@c);
	return join('',
				(map {"<CDSVariant><HGVS><![CDATA[$_]]></HGVS></CDSVariant>\n"} @c),
#				(map {"<ProteinVariant><HGVS><![CDATA[$_]]></HGVS></ProteinVariant>\n"} @p),
			   );
  }

  if ($v->type eq 'c') {
	my (@g,@p);
	@g = $vm->convert_cds_to_chr($v);
#	@p = $vm->convert_cds_to_pro($v) if $v->loc->is_simple;
	return join('',
				(map {"<GenomicVariant><HGVS><![CDATA[$_]]></HGVS></GenomicVariant>\n"} @g),
#				(map {"<ProteinVariant><HGVS><![CDATA[$_]]></HGVS></ProteinVariant>\n"} @p),
			   );
  }

  if ($v->type eq 'p') {
	my @c = $vm->convert_pro_to_cds($v);
#	my @g = $vm->convert_cds_to_chr(@c);
	return join('',
				(map {"<CDSVariant><HGVS><![CDATA[$_]]></HGVS></CDSVariant>\n"} @c),
#				(map {"<GenomicVariant><HGVS><![CDATA[$_]]></HGVS></GenomicVariant>\n"} @g),
			   );
  }

  throw Bio::HGVS::TypeError(
	'Only g, c, and p variant types are supported; your variant is type '.$v->type
   );
}







sub _formatter {
  my ($g) = shift;
  my $chr = $Bio::HGVS::VariantMapper::nc_to_chr{$g->ref} || '?';
  sprintf("  <ChromosomalPosition chromosome=\"%d\" start=\"%d\" end=\"%d\" hgvs=\"%s\"/>\n",
		  $chr, $g->loc->start, $g->loc->end, "$g");
}

sub _fetch_hg_info {
  my %rv;
  my $hg_in = IO::Pipe->new();
  if (not $hg_in->reader( qw(/usr/bin/hg log -l 1))) {
	throw Bio::GenomeCommons::Error($!);
  }
  while ( my $line = <$hg_in> ) {
	if (my ($k,$v) = $line =~ m/^(\w+):\s+(.+)/) {
	  $rv{$k} = $v;
	}
  }
  $rv{'changeset'} =~ s/^\d+://;
  return %rv;
}
